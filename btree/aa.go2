package main

import (
	"fmt"
	"testing"

	"time"

	randomdata "github.com/Pallinder/go-randomdata"
)

type Post struct {
	Id       int
	Title    string
	Content  string
	PostDate time.Time
}

type Node struct {
	Level int
	Left  *Node
	Right *Node
	Key   int
	Value string
}

var NilNode Node

type Tree struct {
	Root *Node
}

//Need to make a node instead of changing a referenced node
func NewNode(key int, value string) *Node {
	// var node *Node
	// node :=
	return &Node{1, &NilNode, &NilNode, key, value}
}

//Skew function
func Skew(n *Node) *Node {
	if n.Level != 0 && n.Left.Level == n.Level {
		// fmt.Println("Skew")
		// var save = n.Left
		// n.Left = save.Right
		// save.Right = n
		// n = save

		//JS Skew
		var temp = n
		n = n.Left
		temp.Left = n.Right
		n.Right = temp
	}
	return n
}

// function split(node) {
//     if (node.Right.Right.Level === node.Level) {
//         var temp = node;
//         node = node.Right;
//         temp.Right = node.Left;
//         node.Left = temp;
//         node.Level++;
//     }
//     return node;
// }

func Split(n *Node) *Node {
	// time.Sleep(time.Second * 2)
	if n.Level != 0 && n.Right.Right.Level == n.Level {

		// var save = n.Right
		// n.Right = save.Left
		// save.Left = n
		// n = save
		// n.Level++

		//JS Split
		var temp = n
		n = n.Right
		temp.Right = n.Left
		n.Left = temp
		n.Level++

	}
	return n
}

func (n *Node) insert(key int, value string) *Node {
	if n == nil || n.Level == 0 {
		return NewNode(key, value)
	}
	if n.Value < value {
		n.Right = n.Right.insert(key, value)

	} else {
		n.Left = n.Left.insert(key, value)
	}
	n = Skew(n)
	n = Split(n)
	return n
}

func (t *Tree) Insert(key int, value string) {
	t.Root = t.Root.ItInsert(key, value)
}

func (t *Tree) Remove(value string) {
	t.Root = ItRemove(t.Root, value)
}

func remove(n *Node, value string) *Node {
	fmt.Println("remove", value)
	var heir *Node
	if n != &NilNode {
		if n.Value == value {
			if n.Left != &NilNode && n.Right != &NilNode {
				heir = n.Left
				for heir.Right != &NilNode {
					heir = heir.Right
				}
				n.Key = heir.Key
				n.Value = heir.Value
				n.Left = remove(n.Left, n.Value)
			} else if n.Left == &NilNode {
				n = n.Right
			} else {
				n = n.Left
			}
		} else if n.Value < value {
			n.Right = remove(n.Right, value)
		} else {
			n.Left = remove(n.Left, value)
		}
	}

	if n.Left.Level < (n.Level-1) || n.Right.Level < (n.Level-1) {
		n.Level--
		if n.Right.Level > n.Level {
			n.Right.Level = n.Level
		}
		n = Split(Skew(n))
	}

	return n
}

func ItRemove(root *Node, value string) *Node {
	fmt.Println("remove", value)
	if root != &NilNode {
		var it = root
		var up []*Node
		top := 0
		dir := 0
		dir2 := 0

		for {
			up = append(up, it)
			fmt.Println(up)

			// if (it == nil)
			// {
			//     return root;
			// }
			// else if (data == it->data)
			// {
			//     break;
			// }

			// dir = it->data < data;
			// it = it->link[dir];

			if it == &NilNode {
				return root
			} else if value == it.Value {
				fmt.Println("found")
				break
			}

			if it.Value < value {
				dir = 1
				it = it.Right
			} else {
				dir = 0
				it = it.Left
			}

			top++
		}

		fmt.Println(up)

		if it.Left == &NilNode || it.Right == &NilNode {
			if it.Left == &NilNode {
				dir2 = 1
			}

			if top > 1 {
				if dir == 0 {
					if dir2 == 0 {
						up[top-1].Left = it.Left
					} else {
						up[top-1].Left = it.Right
					}
				} else {
					if dir2 == 0 {
						up[top-1].Right = it.Left
					} else {
						up[top-1].Right = it.Right
					}
				}
			} else {
				root = it.Right
			}
		} else {

			var heir = it.Right
			var prev = it

			for {
				if heir.Left == &NilNode {
					break
				}

				up = append(up, prev)
				heir = prev
				heir = heir.Left
				top++
			}

			it.Value = heir.Value
			if prev == it {
				prev.Right = heir.Right
			} else {
				prev.Left = heir.Right
			}
		}

		for i := top - 1; i >= 0; i-- {
			if i != 0 {
				if up[i-1].Right == up[i] {
					dir = 1
				} else {
					dir = 0
				}
			}

			if up[i].Left.Level < up[i].Level-1 || up[i].Right.Level < up[i].Level-1 {
				if up[i].Right.Level > up[i].Level-1 {
					up[i].Right.Level = up[i].Level
				}

				up[i] = Skew(up[i])
				up[i].Right = Skew(up[i].Right)
				up[i].Right.Right = Skew(up[i].Right.Right)
				up[i] = Split(up[i])
				up[i].Right = Split(up[i].Right)
			}

			if i != 0 {
				if dir == 0 {
					up[i-1].Left = up[i]
				} else {
					up[i-1].Right = up[i]
				}
			} else {
				root = up[i]
			}
		}
	}

	return root
}

func init() {
	// Initialise Nil Node
	NilNode.Level = 0
	NilNode.Left = &NilNode
	NilNode.Right = &NilNode
	NilNode.Key = 0
	NilNode.Value = ""
}

func (t *Tree) Find(key int) string {

	n := t.Root

	for n.Level != 0 {
		if n.Key == key {
			return n.Value
		}
		if n.Key < key {
			n = n.Right
		} else {
			n = n.Left
		}
	}

	return ""
}

func (n *Node) ItInsert(key int, value string) *Node {
	// fmt.Println("insert")
	if n == nil || n.Level == 0 {
		// fmt.Println("new tree")
		n = NewNode(key, value)
	} else {
		var save = n
		// var up = make([]*Node, 1)
		var up []*Node
		top := 0
		dir := 0
		for {
			up = append(up, save)
			// top++
			if save.Value < value {
				// fmt.Println("right")
				// fmt.Println(save.Right.Level)
				dir = 1
				if save.Right == &NilNode {
					// fmt.Println("break loop")
					break
				}
				// fmt.Println(save, save.Right)
				save = save.Right
				// fmt.Println(save)
			} else {
				// fmt.Println("left")
				dir = 0
				if save.Left == &NilNode {
					break
				}
				save = save.Left
			}
			top++
		}

		if dir == 0 {
			// fmt.Println("New Node left")
			save.Left = NewNode(key, value)
		} else {
			// fmt.Println("New Node right")
			save.Right = NewNode(key, value)
		}

		for i := top - 1; i >= 0; i-- {
			if i != 0 {
				if up[i-1].Right == up[i] {
					dir = 1
				} else {
					dir = 0
				}
			}

			// up[i] = Skew(up[i])
			up[i] = Split(Skew(up[i]))

			if i != 0 {
				if dir == 0 {
					up[i-1].Left = up[i]
				} else {
					up[i-1].Right = up[i]
				}
			} else {
				n = up[i]
			}
		}
	}
	return n
}

// Traversing

func (t *Tree) MaxMin(max bool) (int, string) {

	n := t.Root
	top := 0
	var path []*Node

	/* Build a path to work with */
	if n != nil {
		if max {
			for n.Right.Level != 0 {
				path = append(path, n)
				n = n.Right
				top++
			}
		}
		if !max {
			for n.Left.Level != 0 {
				path = append(path, n)
				n = n.Left
				top++
			}
		}
	}

	return n.Key, n.Value

}

var sl []int

func Ascend(n *Node) {
	if n.Level == 0 {
		return
	}
	Ascend(n.Left)
	// fmt.Println(n.Value)
	sl = append(sl, n.Key)
	Ascend(n.Right)
}

func Descend(n *Node) {
	if n.Level == 0 {
		return
	}
	Descend(n.Right)
	fmt.Println(n.Key)
	Descend(n.Left)
}

func InorderTraversal(n *Node) []string {
	var res []string

	cur := n
	for cur != &NilNode {
		if cur.Left == &NilNode {
			res = append(res, cur.Value)
			// if len(res) == l {
			// 	return res
			// }
			cur = cur.Right
			continue
		}

		pre := cur.Left
		for pre.Right != &NilNode && pre.Right != cur {
			pre = pre.Right
		}

		if pre.Right == &NilNode {
			pre.Right = cur
			cur = cur.Left
		} else {
			pre.Right = &NilNode
			res = append(res, cur.Value)
			// if len(res) == l {
			// 	return res
			// }
			cur = cur.Right
		}
	}
	return res
}

var marker = "ยง"

type serialData struct {
	Value string
	index int
}

func Serialize(n *Node) {
	// If current node is NULL, store marker
	if n == &NilNode {
		fmt.Print(marker)
		return
	}

	// Else, store current node and recur for its children

	fmt.Print(serialData{n.Value, n.Key})
	Serialize(n.Left)
	Serialize(n.Right)
}

// func DeSerialize(t *Tree, s string)
// {
//     // Read next item from file. If theere are no more items or next
//     // item is marker, then return
//     int val;
//     if !fscanf(fp, "%d ", &val) || val == MARKER {
// 	   return
// 	}

//     // Else create node with this item and recur for children
// 	root = newNode(val);

//     DeSerialize(root->left, fp);
//     DeSerialize(root->right, fp);
// }

func main() {

	var tree Tree

	// tree := new(Tree)
	// tree.root = &NilNode
	// fmt.Println(tree.root)
	// tree.Insert(0, "0")
	// tree.Insert(1, "1")
	// tree.Insert(2, "2")
	// tree.Insert(3, "3")
	// tree.Insert(4, "4")
	// tree.Insert(5, "5")

	letters := []string{"q", "w", "e", "r", "t", "y", "u", "i", "o", "p"}
	for i := 0; i < 10; i++ {
		tree.Insert(i, letters[i])
	}

	Serialize(tree.Root)

	var m = map[int]string{}
	var size []string
	size1000 := make([]string, 1000)
	// size100000 := make([]string, 100000)

	for i := 0; i < 1000; i++ {
		num := randomdata.Address()
		size = append(size, num)
		size1000 = append(size1000, num)
		// size100000 = append(size100000, num)
		m[i] = num
	}

}

// func BenchmarkInsert(b *testing.B) {
// 	tree := &Tree{}
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		tree.Insert(i, string(i))
// 	}
// }

// func BenchmarkGet(b *testing.B) {
// 	tree := &Tree{}
// 	for i := 0; i < 1000000; i++ {
// 		tree.Insert(i, string(i))
// 	}
// 	b.ResetTimer()
// 	var sl []string
// 	for i := 0; i < b.N; i++ {
// 		s := tree.Find(i)
// 		sl = append(sl, s)
// 	}
// 	fmt.Println(len(sl))
// }

// func BenchmarkTrav5(b *testing.B) {
// 	tree := &Tree{}
// 	for i := 0; i < 100; i++ {
// 		tree.Insert(i, randomdata.StringNumber(2, "-"))
// 	}
// 	var sl []string
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		sl = InorderTraversal(tree.root)
// 	}
// 	fmt.Println(sl[:5])
// }

// func BenchmarkTrav10(b *testing.B) {
// 	tree := &Tree{}
// 	// letters := []string{"a", "g", "e", "j", "h", "b", "d", "i", "f", "c"}
// 	for i := 0; i < 100; i++ {
// 		tree.Insert(i, randomdata.StringNumber(2, "-"))
// 	}
// 	// var sl []string
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		InorderTraversal(tree.root, 10)
// 	}
// 	// fmt.Println(sl)
// }

// func BenchmarkTrav100(b *testing.B) {
// 	tree := &Tree{}
// 	// letters := []string{"a", "g", "e", "j", "h", "b", "d", "i", "f", "c"}
// 	for i := 0; i < 100; i++ {
// 		tree.Insert(i, randomdata.StringNumber(2, "-"))
// 	}
// 	// var sl []string
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		InorderTraversal(tree.root, 100)
// 	}
// 	// fmt.Println(sl)
// }

// func BenchmarkTrav1000(b *testing.B) {
// 	tree := &Tree{}
// 	// letters := []string{"a", "g", "e", "j", "h", "b", "d", "i", "f", "c"}
// 	for i := 0; i < 1000; i++ {
// 		tree.Insert(i, randomdata.StringNumber(2, "-"))
// 	}
// 	// var sl []string
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		InorderTraversal(tree.root, 1000)
// 	}
// 	// fmt.Println(sl)
// }

// func BenchmarkTrav1000BigData(b *testing.B) {
// 	tree := &Tree{}
// 	// letters := []string{"a", "g", "e", "j", "h", "b", "d", "i", "f", "c"}
// 	for i := 0; i < 1000; i++ {
// 		tree.Insert(i, randomdata.Address())
// 	}
// 	// var sl []string
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		InorderTraversal(tree.root, 1000)
// 	}
// 	// fmt.Println(sl)
// }

// func BenchmarkTravRecursive(b *testing.B) {
// 	tree := &Tree{}
// 	// letters := []string{"a", "g", "e", "j", "h", "b", "d", "i", "f", "c"}
// 	for i := 0; i < 100; i++ {
// 		tree.Insert(i, randomdata.StringNumber(2, "-"))
// 	}
// 	// var sl []string
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		Ascend(tree.root)
// 	}

// 	// fmt.Println(sl)
// }

func BenchmarkSliceLookup(b *testing.B) {
	var slice []int
	var a int
	// letters := []string{"a", "g", "e", "j", "h", "b", "d", "i", "f", "c"}
	// for i := 0; i < 50000001; i++ {
	// 	slice = append(slice, i)
	// }
	// var sl []string

	for i := 0; i < b.N; i++ {
		slice = append(slice, i)
	}
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		// if a > 50000000 {
		// 	i = 49999999
		// }
		a = slice[i]
	}

	fmt.Println(a)
}

// func BenchmarkMapLookup(b *testing.B) {
// 	var m = make(map[int]int)
// 	var a int
// 	// letters := []string{"a", "g", "e", "j", "h", "b", "d", "i", "f", "c"}
// 	for i := 0; i < 50000000; i++ {
// 		m[i] = i
// 	}
// 	// var sl []string
// 	b.ResetTimer()
// 	for i := 0; i < b.N; i++ {
// 		a = m[i]
// 	}

// 	fmt.Println(a)
// }
